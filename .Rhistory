vericolor.cov <- cov(y)
vericolor.cov
print("Covariance Matrix: Virginica")
c7 <- as.matrix(iris.virginica$SepalLength)
c8 <- as.matrix(iris.virginica$SepalWidth)
c9 <- as.matrix(iris.virginica$PetalLength)
z <- matrix(c(c7, c8, c9), ncol = 3)
virginica.cov <- cov(z)
virginica.cov
suppressPackageStartupMessages({
library(MASS)
library(biotools)
})
library(biotools)
boxM(iris[, 1:4], iris[, 5])
library(ggplot2)
library(lattice)
iris <- read.csv("iris.csv")
# Apply LDA
print("LDA Confusion Matrix:")
lda.fit.cv <- lda(Species ~ ., data = iris, CV = TRUE)
lda.confusion <- table(iris$Species, lda.fit.cv$class)
lda.confusion
lda.accuracy <- sum(diag(lda.confusion)) / sum(lda.confusion)
print(paste("LDA Accuracy:", round(lda.accuracy, 5)))
# Apply QDA
print("QDA Confusion Matrix:")
qda.fit.cv <- qda(Species ~ ., data = iris, CV = TRUE)
qda.confusion <- table(iris$Species, qda.fit.cv$class)
print(qda.confusion)
qda.accuracy <- sum(diag(qda.confusion)) / sum(qda.confusion)
print(paste("QDA Accuracy:", round(qda.accuracy, 5)))
# calculate lda without certain variables and see if performance changes. (i.e remove petal length, then restore, then remove petal width). See which scneario has the highest or same accuracy.
# Apply LDA with all variables
lda.fit.cv <- lda(Species ~ ., data = iris, CV = TRUE)
lda.confusion <- table(iris$Species, lda.fit.cv$class)
lda.accuracy1 <- sum(diag(lda.confusion)) / sum(lda.confusion)
print(paste("LDA Accuracy, all variables:", round(lda.accuracy1, 2)))
# without petal length
lda.fit.cv <- lda(Species ~ SepalWidth + SepalLength + PetalWidth, data = iris, CV = TRUE)
lda.confusion <- table(iris$Species, lda.fit.cv$class)
lda.accuracy2 <- sum(diag(lda.confusion)) / sum(lda.confusion)
print(paste("LDA Accuracy, without PetalLength:", round(lda.accuracy2, 2)))
# without petal width
lda.fit.cv <- lda(Species ~ SepalWidth + SepalLength + PetalLength, data = iris, CV = TRUE)
lda.confusion <- table(iris$Species, lda.fit.cv$class)
lda.accuracy3 <- sum(diag(lda.confusion)) / sum(lda.confusion)
print(paste("LDA Accuracy, without PetalWidth:", round(lda.accuracy3, 2)))
# without sepal length
lda.fit.cv <- lda(Species ~ SepalWidth + PetalWidth + PetalLength, data = iris, CV = TRUE)
lda.confusion <- table(iris$Species, lda.fit.cv$class)
lda.accuracy4 <- sum(diag(lda.confusion)) / sum(lda.confusion)
print(paste("LDA Accuracy, without SepalLength:", round(lda.accuracy4, 2)))
# without sepal width
lda.fit.cv <- lda(Species ~ SepalLength + PetalWidth + PetalLength, data = iris, CV = TRUE)
lda.confusion <- table(iris$Species, lda.fit.cv$class)
lda.accuracy5 <- sum(diag(lda.confusion)) / sum(lda.confusion)
print(paste("LDA Accuracy, without SepalWidth:", round(lda.accuracy5, 2)))
data <- read.csv("Nest.csv")
library(devtools)
devtools::load_all()
setwd("~/STAT 5555/carsimr.prettyman/tests/testthat")
setwd("~/STAT 5555/carsimr.prettyman")
devtools::load_all()
test_data <- readRDS("~/STAT 5555/carsimr.prettyman/test_carsimr_data.RDS")
# Subset the three test matrices
test_set <- test_data[1]
# Move the blue cars, then red cars of the initial test set
initial_grid <- test_set[[1]][[1]]
move_result <- move_blue(initial_grid)
move_result2 <- move_red(move_result)
# subset expect results and add class
test_set1 <-  test_set[[1]][[2]]
test_set2 <- test_set[[1]][[3]]
class(test_set1) <- c("carsimr")
class(test_set2) <- c("carsimr")
# Compare the first then second move to expect results
expect_equal(move_result, as.matrix(test_set1))
expect_equal(move_result2, as.matrix(test_set2))
carsimr(test_set1)
carsimr(test_set2)
# Subset the three test matrices
test_set <- test_data[1]
# Move the blue cars, then red cars of the initial test set
initial_grid <- test_set[[1]][[1]]
move_result <- move_blue(initial_grid)
move_result2 <- move_red(move_result)
# subset expect results and add class
test_set1 <-  test_set[[1]][[2]]
test_set2 <- test_set[[1]][[3]]
carsimr(test_set1)
carsimr(test_set2)
# Compare the first then second move to expect results
expect_equal(move_result, as.matrix(test_set1))
expect_equal(move_result2, as.matrix(test_set2))
# Subset the three test matrices
test_set <- test_data[1]
# Move the blue cars, then red cars of the initial test set
initial_grid <- test_set[[1]][[1]]
move_result <- move_blue(initial_grid)
move_result2 <- move_red(move_result)
# subset expect results and add class
test_set1 <-  test_set[[1]][[2]]
test_set2 <- test_set[[1]][[3]]
carsimr(test_set1)
carsimr(test_set2)
# Compare the first then second move to expect results
expect_equal(move_result, test_set1)
expect_equal(move_result2, test_set2)
test_set1
test_set2
carsimr(test_set2)
# Subset the three test matrices
test_set <- test_data[1]
# Move the blue cars, then red cars of the initial test set
initial_grid <- test_set[[1]][[1]]
move_result <- move_blue(initial_grid)
move_result2 <- move_red(move_result)
# subset expect results and add class
test_set1 <-  test_set[[1]][[2]]
test_set2 <- test_set[[1]][[3]]
test_set1 <- carsimr(test_set1)
test_set2 <- carsimr(test_set2)
# Compare the first then second move to expect results
expect_equal(move_result, test_set1)
expect_equal(move_result2, test_set2)
devtools::check()
devtools::check()
use_that("plot")
library(testthat)
use_that("move_cars")
use_test("move_cars")
getwd()
devtools::check()
rho <- 0.999
prob_blue <- 0.50
dims <- c(3, 3)
test_grid <- initialize_grid(rho, dims, prob_blue)
fill_count <- sum(test_grid == 2 | test_grid == 1)
fill_count
(dims[1] * dims[2] * rho)
test_grid
# calculating the total number of cars, using rho
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- ceiling(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
total_cars
v <- sample(c(1,2), total_cars, prob=c(prob_blue, 1-prob_blue), replace = TRUE)
v
blue_cars <- sum(v==1)
red_cars <- sum(v==2)
blue_cars
red_cars
fill_count <- sum(test_grid == 2 | test_grid == 1)
fill_count
devtools::load_all()
rho <- 0.999
prob_blue <- 0.50
dims <- c(3, 3)
test_grid <- initialize_grid(rho, dims, prob_blue)
fill_count <- sum(test_grid == 2 | test_grid == 1)
fill_count
test_grid
initialize_grid(1,c(3,3), 1)
initialize_grid(.999999,c(3,3), 1)
initialize_grid(.999999999999999999999,c(3,3), 1)
initialize_grid(.999999999999,c(3,3), 1)
initialize_grid(.5,c(3,3), 1)
rho=0.5
dims=c(3,3)
prob_blue=0.5
prob_blue=1.0
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- ceiling(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
rho=.999
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- ceiling(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
total_cars
if (prob_blue == 0) {
blue_cars <- 0
red_cars <- total_cars
} else if (prob_blue == 1) {
blue_cars <- total_cars
red_cars <- 0
} else {
v <- sample(c(1,2), total_cars, prob=c(prob_blue, 1-prob_blue), replace = TRUE)
blue_cars <- sum(v==1)
red_cars <- sum(v==2)
}
blue_cars
red_cars
# initialization of matrix
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly, to one
if (blue_cars != 0) {
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, add
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
}
sum(grid==1)
a <- sample(1:dims[1], 1)
a
b <- sample(1:dims[2], 1)
b
i
1:blue_cars
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly, to one
if (blue_cars != 0) {
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1, replace=TRUE)
b <- sample(1:dims[2], 1, replace=TRUE)
# Testing if there is nothing there, add
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
}
sum(grid==1)
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly, to one
if (blue_cars != 0) {
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1, replace=TRUE)
b <- sample(1:dims[2], 1, replace=TRUE)
# Testing if there is nothing there, add
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
}
sum(grid==1)
?runif
runif(1, 1, 10)
runif(1, 0, 0.9) / 10
v <- sample(c(1,2), total_cars, prob=c(prob_blue, 1-prob_blue), replace = TRUE)
blue_cars <- sum(v==1)
red_cars <- sum(v==2)
v
blue_cars
red_cars
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly, to one
if (blue_cars != 0) {
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1, replace=TRUE)
b <- sample(1:dims[2], 1, replace=TRUE)
# Testing if there is nothing there, add
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
}
sum(grid==1)
grid<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid
gridZero<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid<- c(gridZero, cars)
gridZero
grid
?rep
gridZero<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid<- c(gridZero, cars)
sample<- grid
grid <- as.matrix(grid)
grid
grid<- c(gridZero, cars)
grid
gridZero<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid<- c(gridZero, carz)
sample<- grid
grid <- as.matrix(grid)
carz <- sample(c(1,2), total_cars, prob=c(prob_blue, 1-prob_blue), replace = TRUE)
gridZero<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid<- c(gridZero, carz)
grid
sample<- grid
sample
grid <- as.matrix(grid)
grid
gridZero<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid<- c(gridZero, carz)
sample<- grid
grid <- as.matrix(grid, nrow=dims[1], ncol=dims[2])
grid
grid <- matrix(0, dims[1], dims[2])
gridZero<- c(rep(0,(dims[1]*dims[2])-total_cars))
grid<- c(gridZero, carz)
sample<- grid
grid <- matrix(grid, nrow=dims[1], ncol=dims[2])
grid
grid
grid <- matrix(sample(grid), nrow=dims[1], ncol=dims[2])
grid
rho <- runif(0,1)
prob_blue <- 0.50
dims <- c(5, 5)
num_cars <- rho * dims[1] * dims[2]
expected_count1 <- round(num_cars)
expected_count2 <- trunc(num_cars)
test_grid <- initialize_grid(rho, dims, prob_blue)
actual_count <- sum(test_grid == 2 | test_grid == 1)
actual_count == expected_count1
sum(test_grid == 2 | test_grid == 1)
expected_count1 <- round(num_cars)
expected_count1
?round
expected_count1 <- round(num_cars, digits = 0)
expected_count1
num_cars <- rho * dims[1] * dims[2]
num_cars
rho
?runif
rho <- runif(1)
prob_blue <- 0.50
dims <- c(5, 5)
num_cars <- rho * dims[1] * dims[2]
expected_count1 <- round(num_cars, digits = 0)
expected_count2 <- trunc(num_cars)
test_grid <- initialize_grid(rho, dims, prob_blue)
actual_count <- sum(test_grid == 2 | test_grid == 1)
num_cars
actual_count
use_this::use_test("move_red_blue")
library(usethis)
use_this::use_test("move_red_blue")
library(devtools)
use_this::use_test("move_red_blue")
usethis::use_test("move_red_blue")
devtools::check()
rho <- 0.50
prob_blue <- 1
dims <- c(10, 10)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
test_grid_red <- initialize_grid(rho, dims, prob_blue=0)
test_grid_blue
test_grid_red
sum(test_grid_blue==1||test_grid_blue==2)
rho <- 0.50
prob_blue <- 1
dims <- c(10, 10)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
test_grid_red <- initialize_grid(rho, dims, prob_blue=0)
sum(test_grid_blue=1||test_grid_blue=2)
sum(test_grid_blue=1)+sum(test_grid_blue=2)
sum(test_grid_red=1)+sum(test_grid_red=2)
sum(test_grid_red=2)
sum(test_grid_red=1)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
rho <- 0.50
prob_blue <- 1
dims <- c(5, 5)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
test_grid_red <- initialize_grid(rho, dims, prob_blue=0)
test_grid_blue_total <- sum(test_grid_blue=1)+sum(test_grid_blue=2)
test_grid_red_total <- sum(test_grid_red=1)+sum(test_grid_red=2)
test_grid_blue
test_grid_red
sum(test_grid_blue(test_grid_blue=1))
sum(test_grid_blue[test_grid_blue=1])
sum(test_grid_blue[test_grid_blue==1])
sum(test_grid_blue[test_grid_blue==1])
sum(test_grid_blue[test_grid_blue==2])
sum(test_grid_red[test_grid_red==1])
sum(test_grid_red[test_grid_red==2])
rho * prod(dims)
ceiling(rho * prod(dims))
test_grid_blue_total
test_grid_blue_total <- sum(test_grid_blue[test_grid_blue==1]) + sum(test_grid_blue[test_grid_blue==2])
test_grid_red_total <- sum(test_grid_red[test_grid_red==1]) + sum(test_grid_red[test_grid_red==2])
test_grid_red_total
test_grid_blue_total
rho <- 0.50
prob_blue <- 1
dims <- c(5, 5)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
test_grid_red <- initialize_grid(rho, dims, prob_blue=0)
test_grid_blue_total <- sum(test_grid_blue[test_grid_blue==1]) + sum(test_grid_blue[test_grid_blue==2])
test_grid_red_total <- sum(test_grid_red[test_grid_red==1]) + sum(test_grid_red[test_grid_red==2])
expected_total <- ceiling(rho * prod(dims))
expect_equal(test_grid_blue_total, test_grid_red_total, expected_total)
ceiling(rho * prod(dims))
expect_true(test_grid_blue_total == test_grid_red_total == expected_total)
test_grid_blue_total == test_grid_red_total == expected_total
(test_grid_blue_total && test_grid_red_total = expected_total)
test_grid_blue_total & test_grid_red_total
test_grid_red_total = expected_total
test_grid_red_total == expected_total
(test_grid_blue_total & test_grid_red_total == expected_total)
rho <- 0.50
prob_blue <- 1
dims <- c(5, 5)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
test_grid_red <- initialize_grid(rho, dims, prob_blue=0)
test_grid_blue_total <- sum(test_grid_blue[test_grid_blue==1]) + sum(test_grid_blue[test_grid_blue==2])
test_grid_red_total <- sum(test_grid_red[test_grid_red==1]) + sum(test_grid_red[test_grid_red==2])
expected_total <- ceiling(rho * prod(dims))
test_grid_blue_total
test_grid_red_total
test_grid_red
test_grid_blue
sum(test_grid_red[test_grid_red==1])
sum(test_grid_red[test_grid_red==2]
)
test_grid_red[test_grid_red==2
]
sum(test_grid_red == 2)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
devtools::check()
styler:::style_active_pkg()
styler:::style_active_file()
styler::tidyverse_style()
library(lintr)
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
lintr::lint_package()
source("~/STAT 5555/carsimr.prettyman/R/plot.R")
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
devtools::test()
devtools::check()
lintr::lint_package()
lintr::lint_package()
library(carsimr.prettyman)
install.packages(carsimr.prettyman)
setwd("~/STAT 5555/carsimr.prettyman")
install.packages(carsimr.prettyman)
library(devtools)
devtools::load_all()
devtools::check()
lintr::lint_package()
test_dir()
test_dir("test/testthat")
test_dir(".test/testthat")
test_dir("test/testthat/")
test_dir("tests/testthat")
