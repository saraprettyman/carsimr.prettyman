rho <- 0.50
prob_blue <- 1
dims <- c(5, 5)
test_grid_blue <- initialize_grid(rho, dims, prob_blue=1)
test_grid_red <- initialize_grid(rho, dims, prob_blue=0)
test_grid_blue_total <- sum(test_grid_blue[test_grid_blue==1]) + sum(test_grid_blue[test_grid_blue==2])
test_grid_red_total <- sum(test_grid_red[test_grid_red==1]) + sum(test_grid_red[test_grid_red==2])
expected_total <- ceiling(rho * prod(dims))
test_grid_blue_total
test_grid_red_total
test_grid_red
test_grid_blue
sum(test_grid_red[test_grid_red==1])
sum(test_grid_red[test_grid_red==2]
)
test_grid_red[test_grid_red==2
]
sum(test_grid_red == 2)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
devtools::check()
styler:::style_active_pkg()
styler:::style_active_file()
styler::tidyverse_style()
library(lintr)
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
lintr::lint_package()
source("~/STAT 5555/carsimr.prettyman/R/plot.R")
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
lintr::lint_package()
styler:::style_active_pkg()
lintr::lint_package()
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
devtools::test()
devtools::check()
lintr::lint_package()
lintr::lint_package()
library(carsimr.prettyman)
install.packages(carsimr.prettyman)
setwd("~/STAT 5555/carsimr.prettyman")
install.packages(carsimr.prettyman)
library(devtools)
devtools::load_all()
devtools::check()
lintr::lint_package()
test_dir()
test_dir("test/testthat")
test_dir(".test/testthat")
test_dir("test/testthat/")
test_dir("tests/testthat")
devtools::load_all()
grid <- matrix(c(0,1,1,2,2,1,1,2,0), 3,3)
grid
plot.carsimr(grid)
plot.carsimr(grid)
plot.carsimr(grid)
?levelplot
library(lattice)
?levelplot
plot.carsimr(grid)
plot.carsimr(grid)
plot.carsimr(grid)
plot.carsimr(grid)
# correcting print orientation
grid <- x
if (length(dim(grid)) == 0) {
stop("Input matrix is empty")
}
grid <- grid[seq_len(dim(grid)[1]), ]
grid <- t(grid)
lattice::levelplot(grid,
cuts = 2,
ylim = c(ncol(x) + 0.5, 0.5),
scale = list(draw=FALSE),
ylab= "",
xlab= "",
colorkey = false,
labels = false,
panel = function(...){panel.levelplot(...)
panel.grid(h=ncol(x)-1, v=nrow(x)-1, col = "black") },
col.regions = c("grey", "blue","red"),at = c(-0.1, 0.9, 1.9, 2.1))
# correcting print orientation
grid <- x
if (length(dim(grid)) == 0) {
stop("Input matrix is empty")
}
grid <- grid[seq_len(dim(grid)[1]), ]
grid <- t(grid)
lattice::levelplot(grid,
cuts = 2,
ylim = c(ncol(x) + 0.5, 0.5),
scale = list(draw=FALSE),
ylab= "",
xlab= "",
colorkey = false,
labels = false,
panel = function(...){panel.levelplot(...)
panel.grid(h=ncol(x)-1, v=nrow(x)-1, col = "black") },
col.regions = c("grey", "blue","red"),at = c(-0.1, 0.9, 1.9, 2.1))
# correcting print orientation
grid <- x
if (length(dim(grid)) == 0) {
stop("Input matrix is empty")
}
grid <- grid[seq_len(dim(grid)[1]), ]
grid <- t(grid)
lattice::levelplot(grid,
cuts = 2,
ylim = c(ncol(x) + 0.5, 0.5),
scale = list(draw=FALSE),
ylab= "",
xlab= "",
colorkey = false,
labels = false,
panel = function(...){panel.levelplot(...)
panel.grid(h=ncol(x)-1, v=nrow(x)-1, col = "black") },
col.regions = c("grey", "blue","red"),at = c(-0.1, 0.9, 1.9, 2.1))
plot.carsimr(grid)
plot.carsimr <- function(x, y, ...) {
# correcting print orientation
grid <- x
if (length(dim(grid)) == 0) {
stop("Input matrix is empty")
}
grid <- grid[seq_len(dim(grid)[1]), ]
grid <- t(grid)
lattice::levelplot(grid,
cuts = 2,
ylim = c(ncol(x) + 0.5, 0.5),
scale = list(draw=FALSE),
ylab= "",
xlab= "",
colorkey = FALSE,
labels = FALSE,
panel = function(...){panel.levelplot(...)
panel.grid(h=ncol(x)-1, v=nrow(x)-1, col = "black") },
col.regions = c("grey", "blue","red"),at = c(-0.1, 0.9, 1.9, 2.1))
}
plot.carsimr(grid)
styler:::style_active_file()
styler:::style_active_pkg()
devtools::lintr()
lintr::use_lintr()
lintr::link_package()
getwd()
lintr::use_lintr(type='tidyverse')
lintr::lintr_package()
lintr::lint_package()
use_github_action_check_standard()
use_github_actions()
use_readme_rmd()
use_readme_rmd()
use_readme_rmd()
?use_readme_rmd
library(usethis)
use_readme_rmd()
## Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = 3
grid <- initialize_grid(rho, dims, prob_blue)
## Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
## Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
move_cars(grid)
move_cars(grid, trials = 4)
move_cars(grid, trials = 4)
moved_list <- move_cars(grid, trials = 4)
# Inidividual plot
plot.carsimr(grid)
plot.carsimr_list(moved_list)
#' Plot carsimr output
#'
#' Plot an image of the carsimr grid with
#' blue and red colors representing the cars.
#'
#'
#' @param x A matrix that contains the carsimr output
#' @param y Ignore
#' @param ... (optional) Additional arguments for the
#' graphics::image function
#'
#' @return An image of the carsimr matrix
#' @examples
#' grid <- matrix(c(0, 2, 1, 2, 1, 2, 1, 1, 0), nrow = 3, ncol = 3, byrow = TRUE)
#' plot.carsimr(grid)
#'
#' @export
#'
plot.carsimr <- function(x, y, ...) {
# correcting print orientation
grid <- x
if (length(dim(grid)) == 0) {
stop("Input matrix is empty")
}
grid <- grid[seq_len(dim(grid)[1]), ]
grid <- t(grid)
lattice::levelplot(grid,
cuts = 2,
ylim = c(ncol(x) + 0.5, 0.5),
scale = list(draw = FALSE),
ylab = "",
xlab = "",
colorkey = FALSE,
labels = FALSE,
panel = function(...) {
panel.levelplot(...)
panel.grid(h = ncol(x) - 1, v = nrow(x) - 1, col = "black")
},
col.regions = c("grey", "blue", "red"), at = c(-0.1, 0.9, 1.9, 2.1)
)
}
#' Plot List of carsimr output
#'
#' Plots a list of carsimr outputs, each containing
#' an image with blue and red representing the cars
#'
#' @param x A list of matrices containing the carsimr outputs
#' @param y Ignored
#' @param pause The pause time (in seconds) between each
#' plot image print
#' @param ... (optional) Additional arguments for the plot.carsimr function
#'
#' @return A sequence of plots protraying the carsimr outputs
#' @examples
#' grid_list <- list(
#'   matrix(c(0, 1, 1, 2, 2, 2, 0, 0, 0), nrow = 3, ncol = 3),
#'   matrix(c(0, 0, 0, 1, 1, 1, 2, 2, 2), nrow = 3, ncol = 3),
#'   matrix(c(1, 1, 1, 2, 2, 2, 0, 0, 0), nrow = 3, ncol = 3)
#' )
#' plot.carsimr_list(grid_list, pause = 1)
#' @export
plot.carsimr_list <- function(x, y, pause, ...) {
grid_list <- x
for (i in seq_along(grid_list)) {
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
plot.carsimr_list(moved_list)
# Inidividual plot
plot.carsimr(grid)
# Multiple grid print, with one second pause in between each
plot.carsimr_list(moved_list, pause = 1)
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
#' Create a matrix of values 0, 1, and 2
#'
#' @param rho - The density of cars in the grid
#' @param dims -  A vector of length 2 representing the dimensions of the grid.
#' @param prob_blue - The proportion, between 0 and 1
#' of blue squares out of total number of cars.
#'
#' @return This returns a matrix with blue, red, and no cars represented
#' by 0,1,2 respectively.
#' @examples
#' initialize_grid(rho = 56, c(10, 10), 0.4)
#' initialize_grid(rho = 0.50, c(3, 3), 0.96)
#' @export
initialize_grid <- function(rho, dims, prob_blue) {
p <- c(prob_blue, 1 - prob_blue)
# calculating the total number of cars, using rho
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- ceiling(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
# create total number of red and blue cars
carz <- sample(c(1, 2), total_cars, prob = p, replace = TRUE)
# Combinate zeros and cars
grid_zero <- c(rep(0, (dims[1] * dims[2]) - total_cars))
grid <- c(grid_zero, carz)
grid <- matrix(sample(grid), nrow = dims[1], ncol = dims[2])
# Create a new instance of the carsimr class
structure(grid, class = "carsimr")
}
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- initialize_grid(rho, dims, prob_blue)
grid
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
grid <- carsimr.prettyman::initialize_grid(rho, dims, prob_blue)
grid
# Positive integer or float are acceptable
rho = 0.50
dims = c(3,3)
prob_blue = .68
#grid <- initialize_grid(rho, dims, prob_blue)
#grid
library(carsimr.prettyman)
devtools::load_all()
install.packages("devtools")
devtools::install_github("saraprettyman/carsimr.prettyman")
install.packages("devtools")
install.packages("carsimr.prettyman")
library(carsimr.prettyman)
devtools::load_all()
install.packages("carsimr.prettyman")
getwd()
.libPaths()
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
getwd()
library(rmarkdown)
render("carsimr.prettyman/README.Rmd")
render("README.Rmd")
file.exists("carsimr.prettyman")
file.exists("carsimr.prettyman.Rproj")
render("README.Rmd")
library(devtools)
devtools::test()
styler:::style_active_pkg()
devtools::test()
?which
?apply
?cind
cbind
?cbind
initialize_grid(0.5, c(4,4), 0.9)
dims <- dim(t_grid)
new_grid <- matrix(0, dims[1], dims[2])
t_grid <- initialize_grid(0.5, c(4,4), 0.9)
dims <- dim(t_grid)
new_grid <- matrix(0, dims[1], dims[2])
new_grid
blue_cars <- t_grid == 1
blue_cars
(t_grid == 1)
empty_cells_above <- cbind(FALSE, blue_cars[-nrow(blue_cars),])
empty_cells_above
empty_cells_above <- rbind(FALSE, blue_cars)
empty_cells_above
empty_cells_above <- rbind(FALSE, blue_cars)
empty_cells_above <- empty_cells_above[-nrow(blue_cars),]
empty_cells_above
empty_cells_above <- cbind(FALSE, blue_cars[-nrow(blue_cars),])
empty_cells_above
t_grid[nrow(t_grid),]
t_grid
t_grid <- initialize_grid(0.5, c(4,4), 0.9)
t_grid
t_grid[nrow(t_grid),]
empty_cells_below <- t_grid[nrow(t_grid),] == 0
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
blue_cars <- which(t_grid == 1, arr.ind = TRUE)
blue_cars
devtools::test()
devtools::test()
devtools::test()
devtools::test()
styler:::style_active_pkg()
devtools::check()
?panel.grid
devtools::document()
devtools::check()
styler:::style_active_pkg()
styler:::style_active_file()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
initialize_grid(rho = 56, c(10, 10), 0.4)
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
plot(grid)
grid <- initialize_grid(0.50, c(3,3), 0.5)
plot(grid)
grid_list <- move_cars(grid, 5)
plot(grid_list, pause = 1)
grid_list
plot(grid_list, pause = 1)
plot(grid)
plot(grid_list, pause = 1)
plot(grid_list, y, pause = 1)
plot(1)
plot(c(1,1,1)
plot(c(1,1,1))
plot(c(1,1,1))
plot(grid)
grid <- initialize_grid(0.50, c(3,3), 0.5)
grid_list <- move_cars(grid, 5)
class(grid_list)
plot(grid_list, pause = 1)
devtools::document()
devtools::check()
library(carsimr.prettyman)
trials = 5
!is.integer(trials) || trials < 1
!is.integer(trials)
typeof(trials)
devtools::check()
lintr::lint_package()
4%%1
4%%1 != 0
trials <
trials < 1
trials < 1
library(carsimr.prettyman)
devtools::load_all()
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
output.exclude = c("pdf", "jpg", "png")
)
)
devtools::load_all()
library(carsimr.prettyman)
lintr::lint_package()
