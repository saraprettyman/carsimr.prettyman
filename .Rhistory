use_r("initialize_grid")
library(devtools)
use_r("initialize_grid")
use_r("move_red")
use_r("move_blue")
use_r("move_cars")
use_r("plot.carsimr")
use_r("plot.carsimr_list")
load_all()
?setClass
initialize_grid(0.5, c(5, 5), 0.7)
my_carsimr <- initialize_grid(0.5, c(5, 5), 0.7)
class(my_carsimr)
View(my_carsimr)
# Create the initialize grid function to return class instance
initialize_grid <- function(rho, dims, prob_blue) {
# calculating the total number of cars, using rho
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- round(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
if (total_cars == 0) {
stop("rho is too small. Please increase rho or choose a larger grid.")
}
# create total number of red and blue cars
if (prob_blue == 0) {
blue_cars <- 0
red_cars <- total_cars
} else if (prob_blue == 1) {
blue_cars <- total_cars
red_cars <- 0
} else {
blue_cars <- round(total_cars * prob_blue)
red_cars <- total_cars - blue_cars
}
# initialization of matrix
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
# Input red squares randomly
for (i in 1:red_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 2
} else {
i <- i - 1
}
}
# Create a new instance of the carsimr class
object <- new("carsimr", grid = grid)
return(object)
}
l <- initialize_grid(0.5, c(5, 5), 0.7)
# Define the carsimr class, which returns a geneator function to create objects from the class
carsimr <- setClass("carsimr", slots = c(grid = "matrix"))
#'
#'
#'@param rho - A proportion between 0 and 1 of the number of grid cells that should be filled with cars. Alternatively, an integer value specifying the precise number of cars.
#'@param dims - A numeric vector of length two specifying the row and column dimensions of the matrix.
#'@param prob_blue - A numeric value between 0 and 1 (including 0 and 1) that represents the probability of selecting a blue car. This implies that the probability of selecting a red car is 1 - prob_blue.
#'
#'@results creates a matrix of 0's, 1's, and 2's representing the initial location of cars on the grid.
#'
#'
# Define the carsimr class, which returns a geneator function to create objects from the class
carsimr <- setClass("carsimr", slots = c(grid = "matrix"))
# Create the initialize grid function to return class instance
initialize_grid <- function(rho, dims, prob_blue) {
# calculating the total number of cars, using rho
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- round(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
if (total_cars == 0) {
stop("rho is too small. Please increase rho or choose a larger grid.")
}
# create total number of red and blue cars
if (prob_blue == 0) {
blue_cars <- 0
red_cars <- total_cars
} else if (prob_blue == 1) {
blue_cars <- total_cars
red_cars <- 0
} else {
blue_cars <- round(total_cars * prob_blue)
red_cars <- total_cars - blue_cars
}
# initialization of matrix
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
# Input red squares randomly
for (i in 1:red_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 2
} else {
i <- i - 1
}
}
# Create a new instance of the carsimr class
object <- new("carsimr", grid = grid)
return(object)
}
initialize_grid(0.5, c(5, 5), 0.7)
initialize_grid(0.5, c(5, 5), 0.5)
# Create a new instance of the carsimr class
object <- new("carsimr", grid = grid)
setClass("carsimr", slots = c(grid = "matrix"))
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
# Input blue squares randomly
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
# Input red squares randomly
for (i in 1:red_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 2
} else {
i <- i - 1
}
}
#'
#'
#'@param rho - A proportion between 0 and 1 of the number of grid cells that should be filled with cars. Alternatively, an integer value specifying the precise number of cars.
#'@param dims - A numeric vector of length two specifying the row and column dimensions of the matrix.
#'@param prob_blue - A numeric value between 0 and 1 (including 0 and 1) that represents the probability of selecting a blue car. This implies that the probability of selecting a red car is 1 - prob_blue.
#'
#'@results creates a matrix of 0's, 1's, and 2's representing the initial location of cars on the grid.
#'
#'
# Define the carsimr class, which returns a geneator function to create objects from the class
setClass("carsimr", slots = c(grid = "matrix"))
# Create the initialize grid function to return class instance
initialize_grid <- function(rho, dims, prob_blue) {
# calculating the total number of cars, using rho
if (rho %% 1 != 0 && rho < 1) {
# if rho is less than 1
total_cars <- round(rho * dims[1] * dims[2])
} else {
total_cars <- as.integer(rho)
}
if (total_cars == 0) {
stop("rho is too small. Please increase rho or choose a larger grid.")
}
# create total number of red and blue cars
if (prob_blue == 0) {
blue_cars <- 0
red_cars <- total_cars
} else if (prob_blue == 1) {
blue_cars <- total_cars
red_cars <- 0
} else {
blue_cars <- round(total_cars * prob_blue)
red_cars <- total_cars - blue_cars
}
# initialization of matrix
grid <- matrix(0, dims[1], dims[2])
# Input blue squares randomly
for (i in 1:blue_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 1
} else {
i <- i - 1
}
}
# Input red squares randomly
for (i in 1:red_cars) {
# Randomize rows and columns
a <- sample(1:dims[1], 1)
b <- sample(1:dims[2], 1)
# Testing if there is nothing there, if so paste
if (grid[a, b] == 0) {
grid[a, b] <- 2
} else {
i <- i - 1
}
}
# Create a new instance of the carsimr class
object <- new("carsimr", grid = grid)
return(object)
}
initialize_grid(0.5, c(5, 5), 0.5)
install.package("carsimr")
install.package("carsimr")
move_cars
devtools::check()
build()
library(devtools)
build()
install()
devtools::check()
devtools::check()
install.packages("bench")
install.packages("bench")
devtools::check()
devtools::check()
use_r("initialize_grid")
use_r("initialize_grid")
usethis::use_test("initialize_grid")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
devtools::check()
use_r("move_red")
use_r("move_blue")
use_r("move_cars")
use_r("plot")
use_r("constructors")
devtools::check()
build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check(document = FALSE, args = c('--no-manual')
devtools::check(document = FALSE, args = c('--no-manual'))
devtools::check(document = FALSE, args = c('--no-manual'))
rcmdcheck::rcmdcheck()
devtools::check()
rcmdcheck::rcmdcheck()
install.packages("testthat")
install.packages("testthat")
devtools::test()
.libPaths()
devtools::build()
devtools::install()
devtools::check()
getwd()
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
# Time one iteration using the mark function
initial_grid <- initialize_grid(rho = 0.35, dims = c(10, 10), prob_blue = 0.5)
temp <- bench::mark(move_cars(initial_grid, trials = 50), time_unit = "ms")
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
