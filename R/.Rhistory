}
}
# Helper Function carsimr_list
carsimr_list <- function(grid_list = list(), delay = 0){
object <- new_carsimr_list(grid_list, delay)
validate_carsimr_list(object)
return(object)
}
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
#print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
plot(sim1, pause = pause)
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
test3Grid <- initial_grid(rho = 0.3, dims = c(10, 15), prob_blue = 0.9)
test3Grid <- initialize_grid(rho = 0.3, dims = c(10, 15), prob_blue = 0.9)
test3Grid
simTest <- move_cars(test3Grid, 5)
simTest
plot(simTest, 1)
grid <- simTest
grid <- grid[dim(grid)[1]:1, ]
class(grid)
class(grid$grid)
simTest$grid_list
simTest
simTest
simTest$grid_list
simTest$carsimr
typeof(simTest)
simTest[[1]]
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list$grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
# Time one iteration using the mark function
initial_grid <- initialize_grid(rho = 0.35, dims = c(10, 10), prob_blue = 0.5)
temp <- bench::mark(move_cars(initial_grid, trials = 50), time_unit = "ms")
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
print("where null!")
}
}
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
# Time one iteration using the mark function
initial_grid <- initialize_grid(rho = 0.35, dims = c(10, 10), prob_blue = 0.5)
temp <- bench::mark(move_cars(initial_grid, trials = 50), time_unit = "ms")
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
# Time one iteration using the mark function
initial_grid <- initialize_grid(rho = 0.35, dims = c(10, 10), prob_blue = 0.5)
temp <- bench::mark(move_cars(initial_grid, trials = 50), time_unit = "ms")
temp
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (all(grid == 1 || grid == 0)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
initial_grid
all(grid == 1 || grid == 0)
length(unique(grid)) == 2)
(length(unique(grid)) == 2)
(length(unique(initialgrid)) == 2)
(length(unique(initial_grid)) == 2)
any(grid == 1) && any(grid == 0) && !any(grid == 2)
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
grid <- initial_grid
(any(grid == 1) && any(grid == 0) && !any(grid == 2))
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
img[grid == 2] <- 1
}
img[grid == 2] <- 2
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
# Grid lines (border)
graphics::box()
plot.carsimr <- function(grid) {
# correcting print orientation
grid <- grid[dim(grid)[1]:1, ]
grid <- t(grid)
dims <- dim(grid)
r <- dims[1]
c <- dims[2]
img <- matrix(NA, nrow = r, ncol = c)
img[grid == 0] <- 0
img[grid == 1] <- 1
img[grid == 2] <- 2
if (any(grid == 1) && any(grid == 0) && !any(grid == 2)){
graphics::image(1:r, 1:c, img, col=c("white", "blue"), xaxt="n", yaxt="n", xlab="", ylab="")
}else{
graphics::image(1:r, 1:c, img, col=c("white", "blue", "red"), xaxt="n", yaxt="n", xlab="", ylab="")
}
# Grid lines (border)
graphics::box()
}
plot.carsimr_list <- function(grid_list, pause){
for (i in 1:length(grid_list)){
plot.carsimr(grid_list[[i]])
Sys.sleep(pause)
}
}
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that non-square matrix properly formatted.
initial_grid <- initialize_grid(rho = 0.3, dims = c(3, 5), prob_blue = 0.5)
plot(initial_grid)
# Check all blue cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 1)
plot(initial_grid)
# Check all red cars
initial_grid <- initialize_grid(rho = 0.5, dims = c(3, 5), prob_blue = 0)
plot(initial_grid)
# Check mostly blue cars and check integer rho
initial_grid <- initialize_grid(rho = 90, dims = c(10, 10), prob_blue = 0.9)
plot(initial_grid)
# Check mostly red cars and check integer rho
initial_grid <- initialize_grid(rho = 40, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check that same initialization yield different grids each time.
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
initial_grid <- initialize_grid(rho = 0.999, dims = c(10, 5), prob_blue = 0.1)
plot(initial_grid)
# Check three different versions of moves.
check <- function(rho, dims, prob_blue, trials, pause){
init1 <- initialize_grid(rho, dims, prob_blue)
sim1 <- move_cars(init1, trials)
print(plot(sim1, pause = pause))
}
check(rho = 0.3, dims = c(10, 15), prob_blue = 0.9, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(15, 10), prob_blue = 0.1, trials = 5, pause = 0.1)
check(rho = 0.7, dims = c(10, 10), prob_blue = 0.5, trials = 5, pause = 0.1)
# Time one iteration using the mark function
initial_grid <- initialize_grid(rho = 0.35, dims = c(10, 10), prob_blue = 0.5)
temp <- bench::mark(move_cars(initial_grid, trials = 50), time_unit = "ms")
plot.carsimr
